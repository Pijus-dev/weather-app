{"version":3,"sources":["components/weather-section/weather-section.module.scss","components/homepage/homepage.module.scss","components/landing/landing.jsx","redux/weather/weather.types.js","components/weather-section/weatherSection.jsx","redux/weather/weather.actions.js","components/homepage/homepage.jsx","App.js","serviceWorker.js","redux/weather/weather.reducer.js","redux/rootReducer.js","redux/store.js","index.js","components/landing/landing.module.scss"],"names":["module","exports","connect","state","info","weatherInfo","data","className","styles","landingPhoto","style","backgroundImage","image","wind","utcTime","timezone","temp","main","iconName","weather","map","icon","toString","iconUrl","weatherDescription","toFixed","city","name","extraInfo","offset","d","Date","utc","getTime","getTimezoneOffset","toLocaleString","calcTime","src","alt","renderData","weatherTypes","dispatch","getWeatherData","a","fetch","response","json","client","createClient","query","photos","search","per_page","res","undefined","original","type","payload","useState","setCity","capitals","setCapitals","fetchCapitals","array","forEach","item","push","filter","useEffect","weatherSection","onSubmit","e","preventDefault","group","formInput","onChange","target","value","trim","formLabel","sort","b","Math","random","splice","key","cities","onClick","line","details","feels_like","clouds","all","humidity","speed","HomePage","homepage","App","React","Component","Boolean","window","location","hostname","match","weatherReducer","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2bb5192b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"weatherSection\":\"weather-section_weatherSection__1dr9s\",\"group\":\"weather-section_group__2l26s\",\"formInput\":\"weather-section_formInput__MZROe\",\"formLabel\":\"weather-section_formLabel__1hMp2\",\"shrink\":\"weather-section_shrink__2tgBs\",\"cities\":\"weather-section_cities__2VSXP\",\"line\":\"weather-section_line__2okOM\",\"details\":\"weather-section_details__1PTHi\",\"info\":\"weather-section_info__2qzq_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"homepage\":\"homepage_homepage__2hrfO\"};","import React from \"react\";\n\nimport styles from \"./landing.module.scss\";\nimport { connect } from \"react-redux\";\n\nconst Landing = ({ info }) => {\n  const { data } = info;\n\n  const calcTime = (offset) => {\n    var d = new Date();\n    var utc = d.getTime() + d.getTimezoneOffset() * 60000;\n\n    var nd = new Date(utc + 3600000 * offset);\n\n    return nd.toLocaleString();\n  };\n\n  const renderData = () => {\n    if (data && data.wind) {\n      const utcTime = data.timezone / 60 / 60;\n      const temp = data.main.temp - 273.15;\n      const iconName = data.weather.map(({ icon }) => icon.toString());\n      const iconUrl = `http://openweathermap.org/img/wn/${iconName}@2x.png`;\n      const weatherDescription = data.weather.map(({ main }) => main);\n\n      return (\n        <div className={styles.weatherInfo}>\n          <h1>{temp.toFixed(2)}°C</h1>\n          <div className={styles.city}>\n            <h2>{data.name}</h2>\n            <div className={styles.extraInfo}>\n              <h4>{calcTime(utcTime)}</h4>\n            </div>\n          </div>\n          <div className={styles.icon}>\n            <img src={iconUrl} alt=\"weatherIcon\" />\n            <h4>{weatherDescription}</h4>\n          </div>\n        </div>\n      );\n    }\n  };\n\n  return (\n    <div\n      className={styles.landingPhoto}\n      style={\n        data\n          ? {\n              backgroundImage: `url(${info.image})`,\n            }\n          : {\n              backgroundImage:\n                \"url(https://images.unsplash.com/photo-1498496294664-d9372eb521f3?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1950&q=80)\",\n            }\n      }\n    >\n      {renderData()}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    info: state.weatherInfo,\n  };\n};\n\nexport default connect(mapStateToProps)(Landing);\n","export const weatherTypes = {\n  FETCH_DATA: \"FETCH_DATA\",\n};\n","import React, { useState, useEffect } from \"react\";\n\nimport styles from \"./weather-section.module.scss\";\n\nimport { getWeatherData } from \"../../redux/weather/weather.actions\";\nimport { connect } from \"react-redux\";\n\nconst WeatherSection = ({ getWeatherData, info }) => {\n  const { data } = info;\n  const [city, setCity] = useState(\"\");\n  const [capitals, setCapitals] = useState([]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    getWeatherData(city);\n\n    setCity(\"\");\n  };\n\n  const fetchCapitals = async () => {\n    const response = await fetch(\n      \"https://raw.githubusercontent.com/samayo/country-json/master/src/country-by-capital-city.json\"\n    );\n\n    const data = await response.json();\n    const array = [];\n\n    data.forEach((item) => {\n      array.push(item.city);\n    });\n    setCapitals(array.filter((item) => item !== null));\n  };\n\n  const shuffle = (a, b) => {\n    return 0.5 - Math.random();\n  };\n\n  useEffect(() => {\n    fetchCapitals();\n  }, []);\n\n  const renderData = () => {\n    if (data && data.wind) {\n      const temp = data.main.feels_like - 273.15;\n      return (\n        <ul>\n          <li>\n            <p>Cloudy</p>\n            <p className={styles.info}>{data.clouds.all}%</p>\n          </li>\n          <li>\n            <p>Humidity</p>\n            <p className={styles.info}>{data.main.humidity}%</p>\n          </li>\n          <li>\n            <p>Wind</p>\n            <p className={styles.info}>{data.wind.speed}m/s</p>\n          </li>\n          <li>\n            <p>Feels Like</p>\n            <p className={styles.info}>{temp.toFixed(2)}°C</p>\n          </li>\n        </ul>\n      );\n    }\n  };\n\n  return (\n    <div className={styles.weatherSection}>\n      <form onSubmit={handleSubmit}>\n        <div className={styles.group}>\n          <input\n            type=\"text\"\n            className={styles.formInput}\n            onChange={(e) => setCity(e.target.value.trim())}\n          />\n          <label className={styles.formLabel}>another location</label>\n        </div>\n      </form>\n      <h2>Popular Locations</h2>\n      <ul>\n        {capitals\n          .sort(shuffle)\n          .splice(0, 4)\n          .map((city) => {\n            return (\n              <li\n                key={city}\n                className={styles.cities}\n                onClick={() => getWeatherData(city)}\n              >\n                {city}\n              </li>\n            );\n          })}\n      </ul>\n      <div className={styles.line}></div>\n      <h3>Weather Details</h3>\n      <div className={styles.details}>{renderData()}</div>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  getWeatherData: (city) => dispatch(getWeatherData(city)),\n});\n\nconst mapStateToProps = (state) => {\n  return {\n    info: state.weatherInfo,\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherSection);\n","import { weatherTypes } from \"./weather.types\";\n\nimport { createClient } from \"pexels\";\n\nexport const getWeatherData = (city) => async (dispatch) => {\n  const response = await fetch(\n    `https://api.openweathermap.org/data/2.5/weather?q=${city}&APPID=b67030ed298fa43272794609817614f7`\n  );\n  const data = await response.json();\n  let image;\n  const client = createClient(\n    \"563492ad6f91700001000001179cb070e4c04427832624947180655d\"\n  );\n  const query = city;\n  const res = await client.photos.search({ query, per_page: 1 });\n  const [src] = res.photos;\n\n  if (src === undefined) {\n    image =\n      \"https://images.unsplash.com/photo-1498496294664-d9372eb521f3?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1950&q=80\";\n  } else {\n    image = src.src.original;\n  }\n\n  dispatch({\n    type: weatherTypes.FETCH_DATA,\n    payload: { data: data, image },\n  });\n};\n","import React from \"react\";\n\nimport Landing from \"../landing/landing\";\nimport WeatherSection from \"../weather-section/weatherSection\";\n\nimport styles from \"./homepage.module.scss\";\n\nconst HomePage = () => {\n  return (\n    <div className={styles.homepage}>\n      <Landing />\n      <WeatherSection />\n    </div>\n  );\n};\n\nexport default HomePage;\n","import React from \"react\";\n\nimport HomePage from \"./components/homepage/homepage\";\n\nclass App extends React.Component {\n  render() {\n    return <HomePage />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { weatherTypes } from \"./weather.types\";\n\nconst weatherReducer = (state = {}, action) => {\n  switch (action.type) {\n    case weatherTypes.FETCH_DATA:\n      return action.payload || false;\n    default:\n      return state;\n  }\n};\nexport default weatherReducer;\n","import { combineReducers } from \"redux\";\nimport weatherReducer from \"./weather/weather.reducer\";\n\nconst rootReducer = combineReducers({\n  weatherInfo: weatherReducer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport rootReducer from \"./rootReducer\";\nimport thunk from \"redux-thunk\";\n\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"../src/redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"landingPhoto\":\"landing_landingPhoto__1RtQd\",\"weatherInfo\":\"landing_weatherInfo__JpVLV\",\"city\":\"landing_city__3IjWP\",\"extraInfo\":\"landing_extraInfo__L4BXi\",\"icon\":\"landing_icon__1h0S2\"};"],"sourceRoot":""}